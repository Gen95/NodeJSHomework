const express=require("express"),cors=require("cors"),{argv:argv}=require("yargs"),{exec:exec}=require("child_process"),app=express(),port=argv.port||8e3,{pathRepo:pathRepo}=argv,dash=":::";pathRepo||(console.log("Укажите путь к репозиториям"),process.exit(-1)),app.use(express.json()).use(cors()),app.get("/api/repos",(s,t)=>{exec(`cd ${pathRepo} && ls -d */`,(s,e)=>{s?t.status(404).send({result:s}):t.status(200).send({result:e.split("\n").reduce((s,t)=>(t.length&&s.push(t.substring(0,t.length-1)),s),[])})})}),app.get("/api/repos/:repositoryId/commits/:commitHash",(s,t)=>{const{repositoryId:e,commitHash:p}=s.params;exec(`cd ${pathRepo}/${e} && ${`git log --pretty=format:"%H:::%cd:::%s" ${p}`}`,(s,e=[])=>{s?t.status(404).send({result:s}):t.status(200).send({result:e.split("\n").map(s=>{const[t,e,p]=s.split(dash);return{hash:t,time:e,message:p}})})})}),app.post("/api/repos/:repositoryId/commits/:commitHash",(s,t)=>{const{limit:e,offset:p=0}=s.body,{repositoryId:o,commitHash:r}=s.params;exec(`cd ${pathRepo}/${o} && ${`git log --pretty=format:"%H:::%cd:::%s" ${r}`}`,(s,o=[])=>{if(s)t.status(404).send({result:s});else{const s=o.split("\n").map(s=>{const[t,e,p]=s.split(dash);return{hash:t,time:e,message:p}}),r=s.length;t.status(200).send({result:s.splice(p,e||r),count:r})}})}),app.get("/api/repos/:repositoryId/commits/:commitHash/diff",(s,t)=>{const{repositoryId:e,commitHash:p}=s.params;exec(`cd ${pathRepo}/${e} && git diff ${p}`,(s,e)=>{s||!p?t.status(404).send({result:s}):t.status(200).format({"text/html":function(){t.send(`<p style="white-space: pre">${e}<p>`)}})})}),app.get("/api/repos/(:repositoryId|:repositoryId/tree/:commitHash/:path(*))",(s,t)=>{const{repositoryId:e,commitHash:p,path:o}=s.params;let r="git ls-tree -r --name-only";exec(`cd ${pathRepo}/${e} && ${r=p&&o?`${r} ${p} ${o}/`:`${r} HEAD`}`,(s,e)=>{s?t.status(404).send({result:s}):t.status(200).format({"text/html":function(){t.send(`<p style="white-space: pre">${e}<p>`)}})})}),app.get("/api/repos/:repositoryId/blob/:commitHash/:pathToFile(*)",(s,t)=>{const{repositoryId:e,commitHash:p,pathToFile:o}=s.params;exec(`cd ${pathRepo}/${e} && ${`git show ${p}:${o}`}`,(s,e)=>{!s&&o&&p&&e.length?t.status(200).send(e):t.status(404).send({result:s})})}),app.delete("/api/repos/:repositoryId",(s,t)=>{const{repositoryId:e}=s.params;exec(`cd ${pathRepo} && rm -r -f ${e}`,s=>{s?t.status(404).send({result:s}):t.status(200).end()})}),app.post("/api/repos",(s,t)=>{const{url:e}=s.body;exec(`cd ${pathRepo} && git clone ${e}`,s=>{s?t.status(404).send({result:s}):t.status(200).end()})}),app.listen(port,()=>{console.log(`Сервер запущен на ${port} порту`),console.log(`Путь до папки с репозиториями: ${pathRepo}`)});